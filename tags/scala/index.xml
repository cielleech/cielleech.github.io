<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Scala on rookie的小屋</title>
    <link>https://cielleech.github.io/tags/scala/</link>
    <description>Recent content in Scala on rookie的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 14 May 2018 14:37:19 +0800</lastBuildDate>
    
	<atom:link href="https://cielleech.github.io/tags/scala/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Scala class和case class的区别</title>
      <link>https://cielleech.github.io/post/scala_difference_of_class_and_case_class/</link>
      <pubDate>Mon, 14 May 2018 14:37:19 +0800</pubDate>
      
      <guid>https://cielleech.github.io/post/scala_difference_of_class_and_case_class/</guid>
      <description>在Scala中存在case class，它其实就是一个普通的class。但是它又和普通的class略有区别。
 初始化的时候可以不用new，当然你也可以加上，普通类一定需要加new； ``` scala&amp;gt; case class Iteblog(name:String) defined class Iteblog  scala&amp;gt; val iteblog = Iteblog(&amp;ldquo;iteblog_hadoop&amp;rdquo;) iteblog: Iteblog = Iteblog(iteblog_hadoop)
scala&amp;gt; val iteblog = new Iteblog(&amp;ldquo;iteblog_hadoop&amp;rdquo;) iteblog: Iteblog = Iteblog(iteblog_hadoop)
* *toString的实现更漂亮；*  scala&amp;gt; iteblog res5: Iteblog = Iteblog(iteblog_hadoop)
* *默认实现了equals 和hashCode；*  scala&amp;gt; val iteblog2 = Iteblog(&amp;ldquo;iteblog_hadoop&amp;rdquo;) iteblog2: Iteblog = Iteblog(iteblog_hadoop)
scala&amp;gt; iteblog == iteblog2 res6: Boolean = true
scala&amp;gt; iteblog.hashCode res7: Int = 57880342
* *默认是可以序列化的，也就是实现了Serializable；*  scala&amp;gt; class A defined class A</description>
    </item>
    
  </channel>
</rss>