<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rookie的小屋</title>
    <link>http://cielleech.github.io/</link>
    <description>Recent content on rookie的小屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jun 2018 11:13:00 +0800</lastBuildDate>
    
	<atom:link href="http://cielleech.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>linux标准输入输出</title>
      <link>http://cielleech.github.io/post/linux-std/</link>
      <pubDate>Fri, 08 Jun 2018 11:13:00 +0800</pubDate>
      
      <guid>http://cielleech.github.io/post/linux-std/</guid>
      <description>linux中有三种输入输出: * SDTIN, 标准输入, 默认从键盘读取信息, 对应数字0 * SDTOUT, 标准输出, 默认将输出结果输出至终端, 对应数字1 * SDTERR, 标准错误, 默认将输出结果输出至终端, 对应数据2</description>
    </item>
    
    <item>
      <title>Scala class和case class的区别</title>
      <link>http://cielleech.github.io/post/scala_difference_of_class_and_case_class/</link>
      <pubDate>Mon, 14 May 2018 14:37:19 +0800</pubDate>
      
      <guid>http://cielleech.github.io/post/scala_difference_of_class_and_case_class/</guid>
      <description>在Scala中存在case class，它其实就是一个普通的class。但是它又和普通的class略有区别。
 初始化的时候可以不用new，当然你也可以加上，普通类一定需要加new； ``` scala&amp;gt; case class Iteblog(name:String) defined class Iteblog  scala&amp;gt; val iteblog = Iteblog(&amp;ldquo;iteblog_hadoop&amp;rdquo;) iteblog: Iteblog = Iteblog(iteblog_hadoop)
scala&amp;gt; val iteblog = new Iteblog(&amp;ldquo;iteblog_hadoop&amp;rdquo;) iteblog: Iteblog = Iteblog(iteblog_hadoop)
* *toString的实现更漂亮；*  scala&amp;gt; iteblog res5: Iteblog = Iteblog(iteblog_hadoop)
* *默认实现了equals 和hashCode；*  scala&amp;gt; val iteblog2 = Iteblog(&amp;ldquo;iteblog_hadoop&amp;rdquo;) iteblog2: Iteblog = Iteblog(iteblog_hadoop)
scala&amp;gt; iteblog == iteblog2 res6: Boolean = true
scala&amp;gt; iteblog.hashCode res7: Int = 57880342
* *默认是可以序列化的，也就是实现了Serializable；*  scala&amp;gt; class A defined class A</description>
    </item>
    
    <item>
      <title>Gradle Shadow插件</title>
      <link>http://cielleech.github.io/post/java-package/</link>
      <pubDate>Mon, 14 May 2018 12:43:26 +0800</pubDate>
      
      <guid>http://cielleech.github.io/post/java-package/</guid>
      <description>介绍 Shadow作为Gradle插件, 可以用来将dependency classes与resources打包成一单独Jar。此Jar包通常被称为fat-jar或uber-jar.
优势 使用shadow打包主要有以下两种用途: 1. 可执行jar打包 2. lib打包
开始使用 buildscript { repositories { jcenter() } dependencies { classpath &#39;com.github.jengelman.gradle.plguins:shadow:2.0.4&#39; } } apply plugin: &#39;com.github.johnrengelman.shadow&#39;  或者
plugins { id &#39;com.github.johnrengelman.shadow&#39; version &#39;2.0.4&#39; id &#39;java&#39; }  默认Java/Groovy Tasks Shadow将自加入以下动作到Project: * 加入shadowJar任务 * 加入shadow配置 * 设置shadowJar任务加入所有sources到main sourceSet中 * 设置shadowJar任务打包所有dependencies到runtime configuration * 设置shadowJar任务classifier属性为&amp;rsquo;all&amp;rsquo; * 设置shadowJar任务生成Manifest * 设置shadowJar任务排除任意JAR index或者cryptographic signature files, 匹配如下: * META-INF/INEX.LIST * META-INF/*.SF * META-INF/*.DSA * META-INF/*.RSA * 创建并注册shadow组件(用于与maven-publish交互) * 配置uploadShadow任务(作为maven插件), 并具有如下行为: * 从pom.</description>
    </item>
    
    <item>
      <title>AWK入门</title>
      <link>http://cielleech.github.io/post/awk-study/</link>
      <pubDate>Sun, 15 Apr 2018 10:39:47 +0800</pubDate>
      
      <guid>http://cielleech.github.io/post/awk-study/</guid>
      <description>简介 awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。
awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。
awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报 表，还有无数其他的功能。
使用方法 awk &#39;{pattern + action}&#39; {filenames}  尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。
awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。
通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。
调用awk  命令行方式 awk [-F field-separator] &amp;lsquo;commands&amp;rsquo; input-file(s) 其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。 在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。
 shell脚本方式 将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。 相当于shell脚本首行的：#!/bin/sh 可以换成：#!/bin/awk
 将所有的awk命令插入一个单独文件，然后调用： awk -f awk-script-file input-file(s) 其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。
入门实例 取出前五行</description>
    </item>
    
    <item>
      <title>Java内存模型</title>
      <link>http://cielleech.github.io/post/java-memory-model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://cielleech.github.io/post/java-memory-model/</guid>
      <description>1. 概述 　多任务和高并发是衡量一台计算机处理器的能力重要指标之一。一般衡量一个服务器性能的高低好坏，使用每秒事务处理数（Transactions Per Second，TPS）这个指标比较能说明问题，它代表着一秒内服务器平均能响应的请求数，而TPS值与程序的并发能力有着非常密切的关系。在讨论Java内存模型和线程之前，先简单介绍一下硬件的效率与一致性。
2.硬件的效率与一致性 　由于计算机的存储设备与处理器的运算能力之间有几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高速缓存（cache）来作为内存与处理器之间的缓冲：将运算需要使用到的数据复制到缓存中，让运算能快速进行，当运算结束后再从缓存同步回内存之中没这样处理器就无需等待缓慢的内存读写了。 基于高速缓存的存储交互很好地解决了处理器与内存的速度矛盾，但是引入了一个新的问题：缓存一致性（Cache Coherence）。在多处理器系统中，每个处理器都有自己的高速缓存，而他们又共享同一主存，如下图所示：多个处理器运算任务都涉及同一块主存，需要一种协议可以保障数据的一致性，这类协议有MSI、MESI、MOSI及Dragon Protocol等。Java虚拟机内存模型中定义的内存访问操作与硬件的缓存访问操作是具有可比性的，后续将介绍Java内存模型。
　除此之外，为了使得处理器内部的运算单元能竟可能被充分利用，处理器可能会对输入代码进行乱起执行（Out-Of-Order Execution）优化，处理器会在计算之后将对乱序执行的代码进行结果重组，保证结果准确性。与处理器的乱序执行优化类似，Java虚拟机的即时编译器中也有类似的指令重排序（Instruction Recorder）优化。
3.Java内存模型 　定义Java内存模型并不是一件容易的事情，这个模型必须定义得足够严谨，才能让Java的并发操作不会产生歧义；但是，也必须得足够宽松，使得虚拟机的实现能有足够的自由空间去利用硬件的各种特性（寄存器、高速缓存等）来获取更好的执行速度。经过长时间的验证和修补，在JDK1.5发布后，Java内存模型就已经成熟和完善起来了。
3.1 主内存与工作内存 　Java内存模型的主要目标是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样底层细节。此处的变量与Java编程时所说的变量不一样，指包括了实例字段、静态字段和构成数组对象的元素，但是不包括局部变量与方法参数，后者是线程私有的，不会被共享。
　Java内存模型中规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存（可以与前面将的处理器的高速缓存类比），线程的工作内存中保存了该线程使用到的变量到主内存副本拷贝，线程对变量的所有操作（读取、赋值）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同线程之间无法直接访问对方工作内存中的变量，线程间变量值的传递均需要在主内存来完成，线程、主内存和工作内存的交互关系如下图所示，和上图很类似。
这里的主内存、工作内存与Java内存区域的Java堆、栈、方法区不是同一层次内存划分。
3.2 内存间交互操作 关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节，Java内存模型定义了以下八种操作来完成：
 lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。 unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。 read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用 load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。 use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。 assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。 store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。 write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。  如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。也就是read和load之间，store和write之间是可以插入其他指令的，如对主内存中的变量a、b进行访问时，可能的顺序是read a，read b，load b， load a。Java内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：
 不允许read和load、store和write操作之一单独出现 不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。 不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。 一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。 一个变量在同一时刻只允许一条线程对其进行lock操作，lock和unlock必须成对出现 如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值 如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。 对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。
3.3 重排序  　在执行程序时为了提高性能，编译器和处理器经常会对指令进行重排序。重排序分成三种类型：
 编译器优化的重排序。编译器在不改变单线程程序语义放入前提下，可以重新安排语句的执行顺序。 指令级并行的重排序。现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。 内存系统的重排序。由于处理器使用缓存和读写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。 从Java源代码到最终实际执行的指令序列，会经过下面三种重排序：  为了保证内存的可见性，Java编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。Java内存模型把内存屏障分为LoadLoad、LoadStore、StoreLoad和StoreStore四种：</description>
    </item>
    
  </channel>
</rss>